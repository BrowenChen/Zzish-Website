/*
 * Zzish JavaScript SDK
 * 
 * 
 *	TODO
 * 	- check if /secure for api is working correctly
 */

module.exports = Users;

var utils = require('./utils');
var config = require('./config');

function Users(proxy){
	utils.decorateInstance(this, {}, proxy);
}

/* * * * 
Create

eg params: UserObject
return: UserObject
* * * */

Users.prototype.create = function (data, callback) {
	var proxy = this.__proxy;
	var request = {
		url: proxy.buildUrl(this.__paths.users, 'secure'),
		data: data
	};

	if(config.log) console.log('request.url: ' + request.url);

	proxy.ajax( request, function (err, res) {
		if (err) {
			if(config.log) console.log('response of craete graph:' + JSON.stringify(res));
			callback(err, res);
		} else {
			var user = new User(res, proxy);
			callback(err, user);
		}
	});
};

/* * * * 
Get

eg params: user_id
return: UserObject
* * * */

Users.prototype.get = function(id, callback) {
	var proxy = this.__proxy;
	var request = {
		url: proxy.buildUrl(this.__paths.users, 'secure', id),
		method: "GET",
		data: {}
	};
	
	proxy.ajax( request, function (err, res) {
		if (err) {
			callback(err, res);
		} else {
			var user = new User(res, proxy);
			callback(err, user);
		}
	});
};


function User(data, proxy) {
	utils.decorateInstance(this, data, proxy);
}


/* * * * 
Update

eg params: updatedObject
return: newUserObject
* * * */

User.prototype.update = function (callback) {
	var url = this.__proxy.buildUrl(this.__paths.users, id), _this = this;
	delete data.user_id;
	this.__proxy.ajax ({url: url, data: this}, function(err, res) {
		if (err === null) {
			utils.decorateInstance(_this, res);
			callback(err, _this);
		} else {
			callback(err, res);
		}
	});
};


/* * * * 
Login

-> this is to authenticate the user as well as check how long users are active

@params: username, password
return: token, message
* * * */

Users.prototype.auth = function (email, password, callback) {
	var data = {
		email: email,
		password: password
	}

	var url = this.__proxy.buildUrl(this.__paths.users, 'secure','auth');
	if(config.log) console.log(url);

	this.__proxy.ajax ({url: url, data: data}, function(err, res) {
		if (err === null) {
			if(config.log) console.log('no error, res' + JSON.stringify(res));
			callback(res);
		} else {
			callback(err);
		}
	});
};
/* * * * 
Gets data about to populate graph

@params: axis, yaxis, topic, (long in seconds) startmonth start year, (long in seconds) end month, end year
return:  id of graph

//nb NOW: 1402657194
// 2011 - 1325376000
* * * */


Users.prototype.creategraph = function(data, callback) {
	var url = this.__proxy.buildUrl('graphs', 'secure');
	if(config.log) console.log(url);

	this.__proxy.ajax ({url: url, data: data}, function(err, res) {
		if (err === null) {
			if(config.log) console.log('create graph - res: ' + JSON.stringify(res));
			callback(err, res);
		} else {
			callback(err);
		}
	});

}

/* * * * 
Gets data from about to populate graph

@params: user token
return:  [] {axis, yaxis, topic, startmonth, start year, end month, end year}
* * * */

User.prototype.graphsettings = function(id, callback) {
	var proxy = this.__proxy;
	var request = {
		url: proxy.buildUrl(this.__paths.users, 'secure','graphsettings'),
		method: "GET",
		data: id
	};

	this.__proxy.ajax ({url: url, data: data}, function(err, res) {
		if (err === null) {
			callback(err, res);
		} else {
			callback(err);
		}
	});

}

//definition
Users.prototype.getgraph = function(data, callback) {
	var proxy = this.__proxy;
	var request = {
		url: proxy.buildUrl(this.__paths.users, data.UserId + 'graphs' + 'secure' + data.graphId),
		method: "GET",
		data: {}
	};

	console.log('url: ' + request.url)

	this.__proxy.ajax (request, function(err, res) {
		if (err === null) {
			if(config.log) console.log('Get graph response:' + JSON.stringify(res));
			callback(err, res);
		} else {
			callback(err);
		}
	});
}

//get all graph definitions

//get actual data and defintions - get user ID
Users.prototype.getdashboard = function(data, callback) {
	var proxy = this.__proxy;
	var request = {
		url: proxy.buildUrl(this.__paths.users, data.userId, 'secure', 'dashboard'),
		method: "GET",
		data: {}
	};

	console.log('url: ' + request.url);
	console.log('req: ' + JSON.stringify(request));

	this.__proxy.ajax (request, function(err, res) {
		if (err === null) {
			if(config.log) console.log('Get dashboard response:' + JSON.stringify(res));
			callback(err, res);
		} else {
			callback(err);
		}
	});
}


/* * * * 
Logout

-> NOT FOR SESSION MANAGEMENT, this is simply to see how long a user was active
on the zzish platform

return: userObject
* * * */

Users.prototype.logout = function (callback) {
	var url = this.proxy.buildUrl(this.paths.users, data.username, data.password);
	this.proxy.ajax ({url: url, data: data}, callback);
};

